,Bob,Alice,Charlie
!= 0,0.0,0.0,0.004
"""""""
    Calculates the average of a list of numbers.

    Parameters:
        numbers (list of float): The numbers to calculate the average for.

    Returns:
        float: The average of the numbers.
    """""" if",0.0,0.008620689655172414,0.0
"""""""
    Computes statistics using list comprehensions and lambda functions.

    Parameters:
        data (list of float): The dataset.

    Returns:
        dict: Dictionary containing mean, median, and variance.
    """""" mean",0.0,0.0,0.004
"""""""
    Decorator to print function name and arguments.
    """""" @",0.0,0.0,0.004
"""""""
    Finds the maximum number in a list.

    Parameters:
        numbers (list of float): The list of numbers to search.

    Returns:
        float: The maximum number in the list.
    """""" if",0.0,0.008620689655172414,0.0
"""""""
    Main function to demonstrate calculation of average and maximum.
    """""" data",0.0,0.008620689655172414,0.0
"""Avg:"" ,",0.008771929824561403,0.0,0.0
"""Max:"" ,",0.008771929824561403,0.0,0.0
"""__main__"" :",0.008771929824561403,0.008620689655172414,0.004
% 2,0.0,0.0,0.004
"', ' .",0.0,0.0,0.008
'mean' :,0.0,0.0,0.004
'median' :,0.0,0.0,0.004
'variance' :,0.0,0.0,0.004
"( ""Avg:""",0.008771929824561403,0.0,0.0
"( ""Max:""",0.008771929824561403,0.0,0.0
( (,0.0,0.0,0.004
( ),0.017543859649122806,0.017241379310344827,0.012
( *,0.0,0.0,0.008
( data,0.017543859649122806,0.017241379310344827,0.028
( dataset,0.0,0.0,0.004
( func,0.0,0.0,0.008
( map,0.0,0.0,0.004
( numbers,0.0,0.034482758620689655,0.0
( nums,0.043859649122807015,0.0,0.0
( sorted_data,0.0,0.0,0.004
( str,0.0,0.0,0.004
( x,0.0,0.0,0.004
( {,0.0,0.017241379310344827,0.016
) %,0.0,0.0,0.004
) ),0.0,0.0,0.008
) **,0.0,0.0,0.004
) /,0.0,0.0,0.012
) //,0.0,0.0,0.004
) :,0.02631578947368421,0.02586206896551724,0.016
) ==,0.008771929824561403,0.0,0.0
) average,0.0,0.008620689655172414,0.0
) c,0.008771929824561403,0.0,0.0
) count,0.0,0.008620689655172414,0.0
) def,0.0,0.0,0.004
) if,0.008771929824561403,0.008620689655172414,0.012
) kwargs_list,0.0,0.0,0.004
) m,0.008771929824561403,0.0,0.0
) max_num,0.0,0.008620689655172414,0.0
) mid,0.0,0.0,0.004
) print,0.017543859649122806,0.017241379310344827,0.012
) result,0.0,0.0,0.004
) return,0.008771929824561403,0.0,0.004
* args,0.0,0.0,0.008
** 2,0.0,0.0,0.004
** kwargs,0.0,0.0,0.008
+ sorted_data,0.0,0.0,0.004
", 'median'",0.0,0.0,0.004
", 'variance'",0.0,0.0,0.004
", **",0.0,0.0,0.008
", 11",0.0,0.0,0.004
", 14",0.0,0.0,0.004
", 15",0.008771929824561403,0.0,0.0
", 23.3",0.0,0.008620689655172414,0.0
", 25",0.008771929824561403,0.0,0.0
", 3",0.0,0.0,0.004
", 35",0.008771929824561403,0.0,0.0
", 45",0.008771929824561403,0.0,0.0
", 45.2",0.0,0.008620689655172414,0.0
", 67.1",0.0,0.008620689655172414,0.0
", 7",0.0,0.0,0.004
", 8",0.0,0.0,0.004
", 89.0",0.0,0.008620689655172414,0.0
", 9",0.0,0.0,0.004
", a",0.008771929824561403,0.0,0.0
", args",0.0,0.0,0.004
", m",0.008771929824561403,0.0,0.0
", v",0.0,0.0,0.004
- 1,0.0,0.0,0.004
- mean,0.0,0.0,0.004
. __name__,0.0,0.0,0.008
. items,0.0,0.0,0.004
. join,0.0,0.0,0.008
/ 2,0.0,0.0,0.004
/ c,0.008771929824561403,0.0,0.0
/ count,0.0,0.008620689655172414,0.0
/ len,0.0,0.0,0.008
// 2,0.0,0.0,0.004
0 :,0.008771929824561403,0.0,0.0
0 ],0.008771929824561403,0.008620689655172414,0.0
0 else,0.0,0.0,0.004
0 return,0.0,0.0,0.004
0 s,0.008771929824561403,0.0,0.0
0 sorted_data,0.0,0.0,0.004
0.0 total_sum,0.0,0.008620689655172414,0.0
1 ],0.0,0.0,0.004
"10.5 ,",0.0,0.008620689655172414,0.0
"11 ,",0.0,0.0,0.004
"12 ,",0.0,0.0,0.004
"14 ,",0.0,0.0,0.004
"15 ,",0.008771929824561403,0.0,0.0
2 !=,0.0,0.0,0.004
2 for,0.0,0.0,0.004
2 median,0.0,0.0,0.004
2 variance,0.0,0.0,0.004
"23.3 ,",0.0,0.008620689655172414,0.0
"25 ,",0.008771929824561403,0.0,0.0
"3 ,",0.0,0.0,0.004
"35 ,",0.008771929824561403,0.0,0.0
45 ],0.008771929824561403,0.0,0.0
"45.2 ,",0.0,0.008620689655172414,0.0
"5 ,",0.008771929824561403,0.0,0.0
"67.1 ,",0.0,0.008620689655172414,0.0
"7 ,",0.0,0.0,0.004
8 ],0.0,0.0,0.004
89.0 ],0.0,0.008620689655172414,0.0
"9 ,",0.0,0.0,0.004
": """"""
    Calculates the average of a list of numbers.

    Parameters:
        numbers (list of float): The numbers to calculate the average for.

    Returns:
        float: The average of the numbers.
    """"""",0.0,0.008620689655172414,0.0
": """"""
    Computes statistics using list comprehensions and lambda functions.

    Parameters:
        data (list of float): The dataset.

    Returns:
        dict: Dictionary containing mean, median, and variance.
    """"""",0.0,0.0,0.004
": """"""
    Decorator to print function name and arguments.
    """"""",0.0,0.0,0.004
": """"""
    Finds the maximum number in a list.

    Parameters:
        numbers (list of float): The list of numbers to search.

    Returns:
        float: The maximum number in the list.
    """"""",0.0,0.008620689655172414,0.0
": """"""
    Main function to demonstrate calculation of average and maximum.
    """"""",0.0,0.008620689655172414,0.0
: args_list,0.0,0.0,0.004
: data,0.008771929824561403,0.0,0.0
: dataset,0.0,0.0,0.004
: if,0.02631578947368421,0.008620689655172414,0.0
: m,0.008771929824561403,0.0,0.0
: main,0.008771929824561403,0.008620689655172414,0.004
: maximum,0.0,0.008620689655172414,0.0
: mean,0.0,0.0,0.004
: median,0.0,0.0,0.004
: return,0.017543859649122806,0.017241379310344827,0.0
: variance,0.0,0.0,0.004
"= ', '",0.0,0.0,0.008
= [,0.008771929824561403,0.008620689655172414,0.004
= avg,0.008771929824561403,0.0,0.0
= calculate_average,0.0,0.008620689655172414,0.0
= compute_statistics,0.0,0.0,0.004
= find_maximum,0.0,0.008620689655172414,0.0
= func,0.0,0.0,0.004
= len,0.008771929824561403,0.008620689655172414,0.004
= max_val,0.008771929824561403,0.0,0.0
= n,0.008771929824561403,0.0,0.0
= number,0.0,0.008620689655172414,0.0
= numbers,0.0,0.008620689655172414,0.0
= nums,0.008771929824561403,0.0,0.0
= sorted,0.0,0.0,0.004
= sorted_data,0.0,0.0,0.004
= sum,0.008771929824561403,0.008620689655172414,0.008
= total_sum,0.0,0.008620689655172414,0.0
"== ""__main__""",0.008771929824561403,0.008620689655172414,0.004
== 0,0.008771929824561403,0.0,0.0
> m,0.008771929824561403,0.0,0.0
> maximum,0.0,0.008620689655172414,0.0
@ debug,0.0,0.0,0.004
@ wraps,0.0,0.0,0.004
None m,0.008771929824561403,0.0,0.0
None maximum,0.0,0.008620689655172414,0.0
[ 0,0.008771929824561403,0.008620689655172414,0.0
[ 10.5,0.0,0.008620689655172414,0.0
[ 12,0.0,0.0,0.004
[ 5,0.008771929824561403,0.0,0.0
[ mid,0.0,0.0,0.012
] ),0.0,0.0,0.004
] +,0.0,0.0,0.004
] a,0.008771929824561403,0.0,0.0
] avg,0.0,0.008620689655172414,0.0
] for,0.008771929824561403,0.008620689655172414,0.0
] if,0.0,0.0,0.004
] stats,0.0,0.0,0.004
__name__ ==,0.008771929824561403,0.008620689655172414,0.004
__name__ },0.0,0.0,0.008
a ),0.008771929824561403,0.0,0.0
a =,0.008771929824561403,0.0,0.0
args ),0.0,0.0,0.004
"args ,",0.0,0.0,0.008
args_list =,0.0,0.0,0.004
args_list },0.0,0.0,0.004
average =,0.0,0.008620689655172414,0.0
average def,0.0,0.008620689655172414,0.0
avg (,0.017543859649122806,0.0,0.0
avg =,0.0,0.008620689655172414,0.0
avg },0.0,0.008620689655172414,0.0
c =,0.008771929824561403,0.0,0.0
c def,0.008771929824561403,0.0,0.0
calculate_average (,0.0,0.017241379310344827,0.0
compute_statistics (,0.0,0.0,0.008
count =,0.0,0.008620689655172414,0.0
count return,0.0,0.008620689655172414,0.0
data ),0.017543859649122806,0.017241379310344827,0.032
data =,0.008771929824561403,0.008620689655172414,0.0
data else,0.0,0.0,0.008
dataset ),0.0,0.0,0.004
dataset =,0.0,0.0,0.004
debug (,0.0,0.0,0.004
debug def,0.0,0.0,0.004
def avg,0.008771929824561403,0.0,0.0
def calculate_average,0.0,0.008620689655172414,0.0
def compute_statistics,0.0,0.0,0.004
def debug,0.0,0.0,0.004
def find_maximum,0.0,0.008620689655172414,0.0
def main,0.008771929824561403,0.008620689655172414,0.004
def max_val,0.008771929824561403,0.0,0.0
def wrapper,0.0,0.0,0.004
else (,0.0,0.0,0.004
else 0,0.0,0.0,0.008
find_maximum (,0.0,0.017241379310344827,0.0
for k,0.0,0.0,0.004
for n,0.008771929824561403,0.0,0.0
for number,0.0,0.008620689655172414,0.0
for x,0.0,0.0,0.004
from functools,0.0,0.0,0.004
func (,0.0,0.0,0.004
func ),0.0,0.0,0.008
func .,0.0,0.0,0.008
functools import,0.0,0.0,0.004
if __name__,0.008771929824561403,0.008620689655172414,0.004
if data,0.0,0.0,0.008
if len,0.008771929824561403,0.0,0.004
if n,0.008771929824561403,0.0,0.0
if not,0.008771929824561403,0.017241379310344827,0.0
if number,0.0,0.008620689655172414,0.0
import wraps,0.0,0.0,0.004
in data,0.0,0.0,0.004
in kwargs,0.0,0.0,0.004
in numbers,0.0,0.008620689655172414,0.0
in nums,0.008771929824561403,0.0,0.0
items (,0.0,0.0,0.004
join (,0.0,0.0,0.008
"k ,",0.0,0.0,0.004
k },0.0,0.0,0.004
kwargs ),0.0,0.0,0.008
kwargs .,0.0,0.0,0.004
kwargs_list =,0.0,0.0,0.004
kwargs_list },0.0,0.0,0.004
len (,0.017543859649122806,0.008620689655172414,0.016
m ),0.008771929824561403,0.0,0.0
m :,0.008771929824561403,0.0,0.0
m =,0.02631578947368421,0.0,0.0
m def,0.008771929824561403,0.0,0.0
main (,0.017543859649122806,0.017241379310344827,0.008
map (,0.0,0.0,0.004
max_num =,0.0,0.008620689655172414,0.0
max_num },0.0,0.008620689655172414,0.0
max_val (,0.017543859649122806,0.0,0.0
maximum :,0.0,0.008620689655172414,0.0
maximum =,0.0,0.017241379310344827,0.0
maximum def,0.0,0.008620689655172414,0.0
mean ),0.0,0.0,0.004
"mean ,",0.0,0.0,0.004
mean =,0.0,0.0,0.004
"median ,",0.0,0.0,0.004
median =,0.0,0.0,0.004
mid -,0.0,0.0,0.004
mid =,0.0,0.0,0.004
mid ],0.0,0.0,0.008
n >,0.008771929824561403,0.0,0.0
n in,0.008771929824561403,0.0,0.0
n return,0.008771929824561403,0.0,0.0
not numbers,0.0,0.017241379310344827,0.0
not nums,0.008771929824561403,0.0,0.0
number >,0.0,0.008620689655172414,0.0
number in,0.0,0.008620689655172414,0.0
number return,0.0,0.008620689655172414,0.0
numbers ),0.0,0.034482758620689655,0.0
numbers :,0.0,0.02586206896551724,0.0
numbers [,0.0,0.008620689655172414,0.0
nums ),0.043859649122807015,0.0,0.0
nums :,0.017543859649122806,0.0,0.0
nums [,0.008771929824561403,0.0,0.0
print (,0.017543859649122806,0.017241379310344827,0.012
result =,0.0,0.0,0.004
result return,0.0,0.0,0.004
result },0.0,0.0,0.004
return 0,0.008771929824561403,0.0,0.0
return 0.0,0.0,0.008620689655172414,0.0
return None,0.008771929824561403,0.008620689655172414,0.0
return average,0.0,0.008620689655172414,0.0
return m,0.008771929824561403,0.0,0.0
return maximum,0.0,0.008620689655172414,0.0
return result,0.0,0.0,0.004
return s,0.008771929824561403,0.0,0.0
return wrapper,0.0,0.0,0.004
return {,0.0,0.0,0.004
s /,0.008771929824561403,0.0,0.0
s =,0.008771929824561403,0.0,0.0
sorted (,0.0,0.0,0.004
sorted_data =,0.0,0.0,0.004
sorted_data [,0.0,0.0,0.012
stats =,0.0,0.0,0.004
stats },0.0,0.0,0.004
"str ,",0.0,0.0,0.004
sum (,0.008771929824561403,0.008620689655172414,0.008
total_sum /,0.0,0.008620689655172414,0.0
total_sum =,0.0,0.008620689655172414,0.0
v in,0.0,0.0,0.004
v },0.0,0.0,0.004
variance =,0.0,0.0,0.004
variance },0.0,0.0,0.004
wrapper (,0.0,0.0,0.004
wrapper @,0.0,0.0,0.004
wraps (,0.0,0.0,0.004
wraps def,0.0,0.0,0.004
x -,0.0,0.0,0.004
x in,0.0,0.0,0.004
{ 'mean',0.0,0.0,0.004
{ args_list,0.0,0.0,0.004
{ avg,0.0,0.008620689655172414,0.0
{ func,0.0,0.0,0.008
{ k,0.0,0.0,0.004
{ kwargs_list,0.0,0.0,0.004
{ max_num,0.0,0.008620689655172414,0.0
{ result,0.0,0.0,0.004
{ stats,0.0,0.0,0.004
{ v,0.0,0.0,0.004
} ),0.0,0.017241379310344827,0.012
} def,0.0,0.0,0.004
} for,0.0,0.0,0.004
} {,0.0,0.0,0.016
