,Bob,Alice,Charlie
!= 0,0,0,1
"""""""
    Calculates the average of a list of numbers.

    Parameters:
        numbers (list of float): The numbers to calculate the average for.

    Returns:
        float: The average of the numbers.
    """""" if",0,1,0
"""""""
    Computes statistics using list comprehensions and lambda functions.

    Parameters:
        data (list of float): The dataset.

    Returns:
        dict: Dictionary containing mean, median, and variance.
    """""" mean",0,0,1
"""""""
    Decorator to print function name and arguments.
    """""" @",0,0,1
"""""""
    Finds the maximum number in a list.

    Parameters:
        numbers (list of float): The list of numbers to search.

    Returns:
        float: The maximum number in the list.
    """""" if",0,1,0
"""""""
    Main function to demonstrate calculation of average and maximum.
    """""" data",0,1,0
"""Avg:"" ,",1,0,0
"""Max:"" ,",1,0,0
"""__main__"" :",1,1,1
% 2,0,0,1
"', ' .",0,0,2
'mean' :,0,0,1
'median' :,0,0,1
'variance' :,0,0,1
"( ""Avg:""",1,0,0
"( ""Max:""",1,0,0
( (,0,0,1
( ),2,2,3
( *,0,0,2
( data,2,2,7
( dataset,0,0,1
( func,0,0,2
( map,0,0,1
( numbers,0,4,0
( nums,5,0,0
( sorted_data,0,0,1
( str,0,0,1
( x,0,0,1
( {,0,2,4
) %,0,0,1
) ),0,0,2
) **,0,0,1
) /,0,0,3
) //,0,0,1
) :,3,3,4
) ==,1,0,0
) average,0,1,0
) c,1,0,0
) count,0,1,0
) def,0,0,1
) if,1,1,3
) kwargs_list,0,0,1
) m,1,0,0
) max_num,0,1,0
) mid,0,0,1
) print,2,2,3
) result,0,0,1
) return,1,0,1
* args,0,0,2
** 2,0,0,1
** kwargs,0,0,2
+ sorted_data,0,0,1
", 'median'",0,0,1
", 'variance'",0,0,1
", **",0,0,2
", 11",0,0,1
", 14",0,0,1
", 15",1,0,0
", 23.3",0,1,0
", 25",1,0,0
", 3",0,0,1
", 35",1,0,0
", 45",1,0,0
", 45.2",0,1,0
", 67.1",0,1,0
", 7",0,0,1
", 8",0,0,1
", 89.0",0,1,0
", 9",0,0,1
", a",1,0,0
", args",0,0,1
", m",1,0,0
", v",0,0,1
- 1,0,0,1
- mean,0,0,1
. __name__,0,0,2
. items,0,0,1
. join,0,0,2
/ 2,0,0,1
/ c,1,0,0
/ count,0,1,0
/ len,0,0,2
// 2,0,0,1
0 :,1,0,0
0 ],1,1,0
0 else,0,0,1
0 return,0,0,1
0 s,1,0,0
0 sorted_data,0,0,1
0.0 total_sum,0,1,0
1 ],0,0,1
"10.5 ,",0,1,0
"11 ,",0,0,1
"12 ,",0,0,1
"14 ,",0,0,1
"15 ,",1,0,0
2 !=,0,0,1
2 for,0,0,1
2 median,0,0,1
2 variance,0,0,1
"23.3 ,",0,1,0
"25 ,",1,0,0
"3 ,",0,0,1
"35 ,",1,0,0
45 ],1,0,0
"45.2 ,",0,1,0
"5 ,",1,0,0
"67.1 ,",0,1,0
"7 ,",0,0,1
8 ],0,0,1
89.0 ],0,1,0
"9 ,",0,0,1
": """"""
    Calculates the average of a list of numbers.

    Parameters:
        numbers (list of float): The numbers to calculate the average for.

    Returns:
        float: The average of the numbers.
    """"""",0,1,0
": """"""
    Computes statistics using list comprehensions and lambda functions.

    Parameters:
        data (list of float): The dataset.

    Returns:
        dict: Dictionary containing mean, median, and variance.
    """"""",0,0,1
": """"""
    Decorator to print function name and arguments.
    """"""",0,0,1
": """"""
    Finds the maximum number in a list.

    Parameters:
        numbers (list of float): The list of numbers to search.

    Returns:
        float: The maximum number in the list.
    """"""",0,1,0
": """"""
    Main function to demonstrate calculation of average and maximum.
    """"""",0,1,0
: args_list,0,0,1
: data,1,0,0
: dataset,0,0,1
: if,3,1,0
: m,1,0,0
: main,1,1,1
: maximum,0,1,0
: mean,0,0,1
: median,0,0,1
: return,2,2,0
: variance,0,0,1
"= ', '",0,0,2
= [,1,1,1
= avg,1,0,0
= calculate_average,0,1,0
= compute_statistics,0,0,1
= find_maximum,0,1,0
= func,0,0,1
= len,1,1,1
= max_val,1,0,0
= n,1,0,0
= number,0,1,0
= numbers,0,1,0
= nums,1,0,0
= sorted,0,0,1
= sorted_data,0,0,1
= sum,1,1,2
= total_sum,0,1,0
"== ""__main__""",1,1,1
== 0,1,0,0
> m,1,0,0
> maximum,0,1,0
@ debug,0,0,1
@ wraps,0,0,1
None m,1,0,0
None maximum,0,1,0
[ 0,1,1,0
[ 10.5,0,1,0
[ 12,0,0,1
[ 5,1,0,0
[ mid,0,0,3
] ),0,0,1
] +,0,0,1
] a,1,0,0
] avg,0,1,0
] for,1,1,0
] if,0,0,1
] stats,0,0,1
__name__ ==,1,1,1
__name__ },0,0,2
a ),1,0,0
a =,1,0,0
args ),0,0,1
"args ,",0,0,2
args_list =,0,0,1
args_list },0,0,1
average =,0,1,0
average def,0,1,0
avg (,2,0,0
avg =,0,1,0
avg },0,1,0
c =,1,0,0
c def,1,0,0
calculate_average (,0,2,0
compute_statistics (,0,0,2
count =,0,1,0
count return,0,1,0
data ),2,2,8
data =,1,1,0
data else,0,0,2
dataset ),0,0,1
dataset =,0,0,1
debug (,0,0,1
debug def,0,0,1
def avg,1,0,0
def calculate_average,0,1,0
def compute_statistics,0,0,1
def debug,0,0,1
def find_maximum,0,1,0
def main,1,1,1
def max_val,1,0,0
def wrapper,0,0,1
else (,0,0,1
else 0,0,0,2
find_maximum (,0,2,0
for k,0,0,1
for n,1,0,0
for number,0,1,0
for x,0,0,1
from functools,0,0,1
func (,0,0,1
func ),0,0,2
func .,0,0,2
functools import,0,0,1
if __name__,1,1,1
if data,0,0,2
if len,1,0,1
if n,1,0,0
if not,1,2,0
if number,0,1,0
import wraps,0,0,1
in data,0,0,1
in kwargs,0,0,1
in numbers,0,1,0
in nums,1,0,0
items (,0,0,1
join (,0,0,2
"k ,",0,0,1
k },0,0,1
kwargs ),0,0,2
kwargs .,0,0,1
kwargs_list =,0,0,1
kwargs_list },0,0,1
len (,2,1,4
m ),1,0,0
m :,1,0,0
m =,3,0,0
m def,1,0,0
main (,2,2,2
map (,0,0,1
max_num =,0,1,0
max_num },0,1,0
max_val (,2,0,0
maximum :,0,1,0
maximum =,0,2,0
maximum def,0,1,0
mean ),0,0,1
"mean ,",0,0,1
mean =,0,0,1
"median ,",0,0,1
median =,0,0,1
mid -,0,0,1
mid =,0,0,1
mid ],0,0,2
n >,1,0,0
n in,1,0,0
n return,1,0,0
not numbers,0,2,0
not nums,1,0,0
number >,0,1,0
number in,0,1,0
number return,0,1,0
numbers ),0,4,0
numbers :,0,3,0
numbers [,0,1,0
nums ),5,0,0
nums :,2,0,0
nums [,1,0,0
print (,2,2,3
result =,0,0,1
result return,0,0,1
result },0,0,1
return 0,1,0,0
return 0.0,0,1,0
return None,1,1,0
return average,0,1,0
return m,1,0,0
return maximum,0,1,0
return result,0,0,1
return s,1,0,0
return wrapper,0,0,1
return {,0,0,1
s /,1,0,0
s =,1,0,0
sorted (,0,0,1
sorted_data =,0,0,1
sorted_data [,0,0,3
stats =,0,0,1
stats },0,0,1
"str ,",0,0,1
sum (,1,1,2
total_sum /,0,1,0
total_sum =,0,1,0
v in,0,0,1
v },0,0,1
variance =,0,0,1
variance },0,0,1
wrapper (,0,0,1
wrapper @,0,0,1
wraps (,0,0,1
wraps def,0,0,1
x -,0,0,1
x in,0,0,1
{ 'mean',0,0,1
{ args_list,0,0,1
{ avg,0,1,0
{ func,0,0,2
{ k,0,0,1
{ kwargs_list,0,0,1
{ max_num,0,1,0
{ result,0,0,1
{ stats,0,0,1
{ v,0,0,1
} ),0,2,3
} def,0,0,1
} for,0,0,1
} {,0,0,4
